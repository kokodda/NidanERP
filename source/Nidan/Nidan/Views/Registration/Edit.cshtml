@model Nidan.Models.RegistrationViewModel

@{
    ViewBag.Title = string.Format("Edit Registration ({0})", Model.Registration.Enquiry.FirstName);
}

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2><button type="button" class="btn btn-success btn-lg">@string.Format("{0} {1}", @Model.Registration.Enquiry.FirstName, @Model.Registration.Enquiry.LastName)</button>  Registration Details<small>edit registration</small></h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        @if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
                        {
                            <div class="row">
                                <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                    @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                </div>
                            </div>
                        }
                        <div class="alert alert-warning alert-dismissible fade in" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                            <strong>@string.Format("{0} {1}", @Model.Registration.Enquiry.FirstName, @Model.Registration.Enquiry.LastName)</strong>
                            has been registered for course @Model.Registration.Course.Name and paid Rs @Model.Registration.CandidateFee.PaidAmount out of total Amount
                            @Model.Registration.CandidateInstallment.CourseFee
                        </div>
                        @Html.Partial("_Registration", Model)

                        <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                            <div class="form-group">
                                <div class="pull-right">
                                    <button type="submit" class="btn btn-success">Submit</button>
                                    @*<button type="button" class="btn btn-success" href="@Url.Action("Create", "Admission", new { id = Model.RegistrationPaymentReceipt.RegistrationPaymentReceiptId })">Create Registration</button>*@
                                    <a href="@Url.Action("Create", "Admission", new { id = 1 })" class="btn btn-primary" role="button">
                                        Create Admission&nbsp;<span class="fa fa-chevron-right"></span>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div>
    <button type="submit" class="btn btn-success" onclick="printDiv('printableArea')">Print Registration Receipt</button>
</div>
@section scripts
{
    <script>

        if ($('#RegistrationPaymentReceipt_PaymentModeId :selected').text() == "Cheque") {
            $('.bank-details-textbox').show();
            $("#RegistrationPaymentReceipt_BankName").val("");
            $("#RegistrationPaymentReceipt_ChequeNo").val("");
        } else {
            $('.bank-details-textbox').hide();
        }

        $("#RegistrationPaymentReceipt_PaymentModeId").change(function () {
            if ($('#RegistrationPaymentReceipt_PaymentModeId :selected').text() == "Cheque") {
                $('.bank-details-textbox').show();
                $("#RegistrationPaymentReceipt_BankName").val("");
                $("#RegistrationPaymentReceipt_ChequeNo").val("");
            } else {
                $('.bank-details-textbox').hide();
            }
        });

        function printDiv(divName) {
            var printContents = document.getElementById(divName).innerHTML;
            var originalContents = document.body.innerHTML;

            document.body.innerHTML = printContents;

            window.print();

            document.body.innerHTML = originalContents;
        }

        $(function () {
            $('#publicHolidayErrorSummary').hide();
            var daterangepickerOptions = {
                autoApply: true,
                singleDatePicker: true,
                showDropdowns: true,
                showCustomRangeLabel: false,
                opens: 'left',
                minDate: moment(),
                //maxDate: moment().add('2', 'days').format('DD MMMM YYYY'),
                onSelect: function () {
                    selectedDate = moment().format('DD MMMM YYYY');
                },
                locale: {
                    "format": "DD MMMM YYYY"
                }
            };

            jQuery(function () {
                jQuery(".date").daterangepicker(daterangepickerOptions);
                $('#GeneratedDate').val(moment().format('DD MMMM YYYY'));
                $(".generated .date").on('apply.daterangepicker', function (ev, picker) {
                    $(this).val(picker.startDate.format('DD MMMM YYYY'));
                });
            });
        });

        //-----------------------------------------------------------------
        var fees = $("#RegistrationPaymentReceipt_Fees").val();
        function onlyNumbers(evt) {
            var e = event || evt; // For trans-browser compatibility
            var charCode = e.which || e.keyCode;

            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;
            return true;
        }

        //onkeyup = "NumToWord(this.value,'divDisplayWords')"

        $("#RegistrationPaymentReceipt_Fees")
            .ready(function () {
                var str = $("#RegistrationPaymentReceipt_Fees").val();
                var splt = str.split("");
                var rev = splt.reverse();
                var once = ['Zero', ' One', ' Two', ' Three', ' Four', ' Five', ' Six', ' Seven', ' Eight', ' Nine'];
                var twos = [
                    'Ten', ' Eleven', ' Twelve', ' Thirteen', ' Fourteen', ' Fifteen', ' Sixteen', ' Seventeen',
                    ' Eighteen', ' Nineteen'
                ];
                var tens = [
                    '', 'Ten', ' Twenty', ' Thirty', ' Forty', ' Fifty', ' Sixty', ' Seventy', ' Eighty',
                    ' Ninety'
                ];

                var numLength = rev.length;
                var word = new Array();
                var j = 0;

                for (i = 0; i < numLength; i++) {
                    switch (i) {

                        case 0:
                            if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                                word[j] = '';
                            } else {
                                word[j] = '' + once[rev[i]];
                            }
                            word[j] = word[j];
                            break;

                        case 1:
                            aboveTens();
                            break;

                        case 2:
                            if (rev[i] == 0) {
                                word[j] = '';
                            } else if ((rev[i - 1] == 0) || (rev[i - 2] == 0)) {
                                word[j] = once[rev[i]] + " Hundred ";
                            } else {
                                word[j] = once[rev[i]] + " Hundred and";
                            }
                            break;

                        case 3:
                            if (rev[i] == 0 || rev[i + 1] == 1) {
                                word[j] = '';
                            } else {
                                word[j] = once[rev[i]];
                            }
                            if ((rev[i + 1] != 0) || (rev[i] > 0)) {
                                word[j] = word[j] + " Thousand";
                            }
                            break;


                        case 4:
                            aboveTens();
                            break;

                        case 5:
                            if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                                word[j] = '';
                            } else {
                                word[j] = once[rev[i]];
                            }
                            if (rev[i + 1] !== '0' || rev[i] > '0') {
                                word[j] = word[j] + " Lakh";
                            }

                            break;

                        case 6:
                            aboveTens();
                            break;

                        case 7:
                            if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                                word[j] = '';
                            } else {
                                word[j] = once[rev[i]];
                            }
                            if (rev[i + 1] !== '0' || rev[i] > '0') {
                                word[j] = word[j] + " Crore";
                            }
                            break;

                        case 8:
                            aboveTens();
                            break;

                            //            This is optional.

                            //            case 9:
                            //                if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            //                    word[j] = '';
                            //                }
                            //                else {
                            //                    word[j] = once[rev[i]];
                            //                }
                            //                if (rev[i + 1] !== '0' || rev[i] > '0') {
                            //                    word[j] = word[j] + " Arab";
                            //                }
                            //                break;

                            //            case 10:
                            //                aboveTens();
                            //                break;

                        default:
                            break;
                    }
                    j++;
                }

                function aboveTens() {
                    if (rev[i] == 0) {
                        word[j] = '';
                    } else if (rev[i] == 1) {
                        word[j] = twos[rev[i - 1]];
                    } else {
                        word[j] = tens[rev[i]];
                    }
                }

                word.reverse();
                var finalOutput = '';
                for (i = 0; i < numLength; i++) {
                    finalOutput = finalOutput + word[i];
                }
                $('.divDisplayWords').value(finalOutput + " Only");
            });
        $('#Registration_CourseId').change(function () {
            var courseId = $('#Registration_CourseId :selected').val();
            GetCourseInstallmentsByCourseId(courseId);
            $("#IsTotalAmountDiscountDiv").hide();
        });
        $('#Registration_CourseInstallmentId').change(function () {
            var courseInstallmentId = $('#Registration_CourseInstallmentId :selected').val();
            GetCourseInstallment(courseInstallmentId);
        });
        $('#Registration_CandidateInstallment_IsTotalAmountDiscount').change(function () {
            if ($(this).is(":checked")) {
                $("#overrideFeeDiv").show();
            } else {
                $("#overrideFeeDiv").hide();
            }

        });
        $("#overrideFeeDiv").hide();
        $("#courseInstallmentDiv").hide();
        if ($('#Registration_CandidateInstallment_IsTotalAmountDiscount').val() == "true") {
            $("#IsTotalAmountDiscountDiv").show();
            $("#overrideFeeDiv").show();
        } else {
            $("#IsTotalAmountDiscountDiv").hide();
            $("#overrideFeeDiv").hide();
        }

        //$("#IsTotalAmountDiscountDiv").hide();
        function GetCourseInstallmentsByCourseId(courseId) {
            $.ajax({
                url: '/Registration/GetCourseInstallmentByCourseId',
                type: 'POST',
                data: JSON.stringify({ courseId: courseId }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function (result) {
                    $("#Registration_CourseInstallmentId").empty();
                    $("#Registration_CourseInstallmentId").append($("<option></option>").val(0).html("Select Course Installment"));
                    $.each(result, function (key, value) {
                        $("#Registration_CourseInstallmentId").append($("<option></option>").val(value.CourseInstallmentId).html(value.Name));
                    });
                    if (result.length == 0) {
                        $("#courseInstallmentDiv").hide();
                    }
                },
                async: true,
                processData: false
            });
        }
        function GetCourseInstallment(courseInstallmentId) {
            $.ajax({
                url: '/Registration/GetCourseInstallment',
                type: 'POST',
                data: JSON.stringify({ courseInstallmentId: courseInstallmentId }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function (result) {
                    // $("#Registration_CourseInstallmentId").empty();
                    //$("#IsTotalAmountDiscountDiv").show();
                    $("#courseInstallmentDiv").show();
                    $("#Registration_CourseInstallment_Name").val(result.Name);
                    $("#Registration_CourseInstallment_Fee").val(result.Fee);
                    $("#Registration_CourseInstallment_DownPayment").val(result.DownPayment);
                    $("#Registration_CourseInstallment_LumpsumAmount").val(result.LumpsumAmount);
                    $("#Registration_CourseInstallment_NumberOfInstallment").val(result.NumberOfInstallment);

                },
                async: true,
                processData: false
            });
        }

    </script>
}
