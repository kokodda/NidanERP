@model Nidan.Models.ExpenseViewModel

@{
    ViewBag.Title = "Create Other Fee";
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Create Expense <small></small></h2>
                <div class="clearfix"></div>
            </div>
            <div class="alert alert-warning alert-dismissible fade in" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <strong><i class="fa fa-info-circle"></i> &nbsp;@string.Format("Available Petty Cash Rs. {0} ", @Model.AvailablePettyCash)</strong>
            </div>
            <div class="x_content">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal form-label-left">
                        @if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
                        {
                            <div class="row">
                                <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                    @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                </div>
                            </div>
                        }
                        @Html.HiddenFor(model => model.AvailablePettyCash)
                        @Html.HiddenFor(model => model.CashMemo)
                        @Html.Partial("_Expense", Model)
                        <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                            <div class="form-group">
                                <div class="pull-right">
                                    <button id="btn_submit" type="submit" class="btn btn-success">Submit</button>
                                    @if (Model.CashMemo != null)
                                    {
                                        <button type="button" class="btn btn-warning" ng-click="model.removeError()" data-toggle="modal" data-target="#otherFeeDocumentModal">Upload Document</button>

                                        <a href="@Url.Action("Download", new {id = Model.Expense.ExpenseId})" class="btn btn-success" role="button">
                                            <i class="fa fa-print"></i> Print
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (Model.CashMemo != null)
{
    <div ng-controller="ExpenseDocumentController as model" ng-init="model.initialise(@Model.CashMemo)">
        @Html.Partial("_ExpenseDocument")
    </div>
    @*@Html.HiddenFor(m => m.CashMemo)
        <div ng-controller="OtherFeeController as model" ng-init="model.retrieveOtherFeesByCashMemo(@Model.CashMemo)">
            @Html.Partial("_Expenses")
        </div>*@
}

<div>
    <a href="@Url.Action("Index")" class="btn btn-primary" role="button">
        <span class="fa fa-chevron-left"></span>&nbsp;Back to list
    </a>
</div>
@section scripts {
    <script>
        $('#Expense_DebitAmount').val("");
        $('#Expense_RupeesInWord').val("");
        $('#Expense_Particulars').val("");

        $(function () {
            var today = new Date();
            var day = today.getDay();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();
            var daterangepickerOptions = {
                autoApply: true,
                singleDatePicker: true,
                showDropdowns: true,
                showCustomRangeLabel: false,
                opens: 'left',
                //minDate: moment(),
                minDate: day == 1 || day == 7 ? moment().subtract('0', 'days').format('DD MMMM YYYY') : day == 2 ? moment().subtract('1', 'days').format('DD MMMM YYYY') : day == 3 ? moment().subtract('2', 'days').format('DD MMMM YYYY') : day == 4 ? moment().subtract('3', 'days').format('DD MMMM YYYY') : day == 5 ? moment().subtract('4', 'days').format('DD MMMM YYYY') : moment().subtract('5', 'days').format('DD MMMM YYYY'),
                maxDate: day == 1 ? moment().add('5', 'days').format('DD MMMM YYYY') : day == 2 ? moment().add('4', 'days').format('DD MMMM YYYY') : day == 3 ? moment().add('3', 'days').format('DD MMMM YYYY') : day == 4 ? moment().add('2', 'days').format('DD MMMM YYYY') : day == 5 ? moment().add('1', 'days').format('DD MMMM YYYY') : day == 6 ? moment().add('0', 'days').format('DD MMMM YYYY') : moment().add('6', 'days').format('DD MMMM YYYY'),
                onSelect: function () {
                    selectedDate = moment().format('DD MMMM YYYY');
                },
                locale: {
                    "format": "DD MMMM YYYY"
                }
            };

            jQuery(function () {
                jQuery(".date").daterangepicker(daterangepickerOptions);
                $('#GeneratedDate').val(moment().format('DD MMMM YYYY'));
                $(".generated .date").on('apply.daterangepicker', function (ev, picker) {
                    $(this).val(picker.startDate.format('DD MMMM YYYY'));
                });
            });
        });

        //Expense Debit Amount Validation
        $("#Expense_DebitAmount").keyup(function () {
            var expenseAmount = $("#Expense_DebitAmount").val();
            //numberToWords();
            if (expenseAmount < 999) {
                $('#btn_submit').attr('disabled', false);
            } else {
                $('#btn_submit').attr('disabled', true);
                alert('Expense Voucher CAN NOT be above Rs.999/-');
            }
        });

        function expenseval() {
            $("#Expense_DebitAmount").keyup(function () {
                var expenseAmount = $("#Expense_DebitAmount").val();
                //numberToWords();
                if (expenseAmount < 999) {
                    $('#btn_submit').attr('disabled', false);
                } else {
                    $('#btn_submit').attr('disabled', true);
                    alert('Expense Voucher CAN NOT be above Rs.999/-');
                }
            });
        }

        
    </script>
}