@model Nidan.Models.BankDepositeViewModel
@{
    ViewBag.Title = "Create";
}

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Create Bank Deposite <small></small></h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        @if (ViewData.ModelState.Values.Any(x => x.Errors.Count >= 1))
                        {
                            <div class="row">
                                <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                    @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                </div>
                            </div>
                        }

                        @Html.Partial("_BankDeposite", Model)
                        <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                            <div class="form-group">
                                <div class="pull-right">
                                    <button id="btnsubmit" type="submit" class="btn btn-success">Submit</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div>
    <a href="@Url.Action("Index")" class="btn btn-primary" role="button">
        <span class="fa fa-chevron-left"></span>&nbsp;Back to list
    </a>
</div>
@section scripts {
    <script>
        $("#BankDeposite_CreditAmount").val("");

        var daterangepickerOptions = {
            autoApply: true,
            singleDatePicker: true,
            showDropdowns: true,
            showCustomRangeLabel: false,
            opens: 'left',
            minDate: moment().subtract('2', 'days').format('DD MMMM YYYY'),
            daysOfTheWeek: ['M', 'T', 'W', 'T', 'F'],
            locale: {
                "format": "DD MMMM YYYY"
            }
        };
        moment.weekdays(true);

        jQuery(function () {
            jQuery(".date").daterangepicker(daterangepickerOptions);
            $('#BankDeposite_DepositedDate').val(moment().format('DD MMMM YYYY'));
            $(".date")
                .on('apply.daterangepicker',
                    function (ev, picker) {
                        $(this).val(picker.startDate.format('DD MMMM YYYY'));
                    });
        });

        $('.bank-details-textbox').hide();
        $("#BankDeposite_PaymentModeId").change(function () {
            if ($('#BankDeposite_PaymentModeId :selected').text() == "Cheque") {
                $('.bank-details-textbox').show();
                $("#BankDeposite_BankName").val("");
                $("#BankDeposite_ChequeNumber").val("");
            } else {
                $('.bank-details-textbox').hide();
            }
        });

        $('#BankDeposite_CreditAmount')
            .keyup(function () {
                var inputNumber = $('#BankDeposite_CreditAmount').val();
                var str = new String(inputNumber);
                var splt = str.split("");
                var rev = splt.reverse();
                var once = ['Zero', ' One', ' Two', ' Three', ' Four', ' Five', ' Six', ' Seven', ' Eight', ' Nine'];
                var twos = ['Ten', ' Eleven', ' Twelve', ' Thirteen', ' Fourteen', ' Fifteen', ' Sixteen', ' Seventeen', ' Eighteen', ' Nineteen'];
                var tens = ['', 'Ten', ' Twenty', ' Thirty', ' Forty', ' Fifty', ' Sixty', ' Seventy', ' Eighty', ' Ninety'];

                numLength = rev.length;
                var word = new Array();
                var j = 0;

                for (i = 0; i < numLength; i++) {
                    switch (i) {

                    case 0:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = '' + once[rev[i]];
                        }
                        word[j] = word[j];
                        break;

                    case 1:
                        aboveTens();
                        break;

                    case 2:
                        if (rev[i] == 0) {
                            word[j] = '';
                        }
                        else if ((rev[i - 1] == 0) || (rev[i - 2] == 0)) {
                            word[j] = once[rev[i]] + " Hundred ";
                        }
                        else {
                            word[j] = once[rev[i]] + " Hundred and";
                        }
                        break;

                    case 3:
                        if (rev[i] == 0 || rev[i + 1] == 1) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if ((rev[i + 1] != 0) || (rev[i] > 0)) {
                            word[j] = word[j] + " Thousand";
                        }
                        break;


                    case 4:
                        aboveTens();
                        break;

                    case 5:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if (rev[i + 1] !== '0' || rev[i] > '0') {
                            word[j] = word[j] + " Lakh";
                        }

                        break;

                    case 6:
                        aboveTens();
                        break;

                    case 7:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if (rev[i + 1] !== '0' || rev[i] > '0') {
                            word[j] = word[j] + " Crore";
                        }
                        break;

                    case 8:
                        aboveTens();
                        break;

                    //            This is optional.

                    //            case 9:
                    //                if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                    //                    word[j] = '';
                    //                }
                    //                else {
                    //                    word[j] = once[rev[i]];
                    //                }
                    //                if (rev[i + 1] !== '0' || rev[i] > '0') {
                    //                    word[j] = word[j] + " Arab";
                    //                }
                    //                break;

                    //            case 10:
                    //                aboveTens();
                    //                break;

                    default: break;
                    }
                    j++;
                }

                function aboveTens() {
                    if (rev[i] == 0) { word[j] = ''; }
                    else if (rev[i] == 1) { word[j] = twos[rev[i - 1]]; }
                    else { word[j] = tens[rev[i]]; }
                }

                word.reverse();
                var finalOutput = '';
                for (i = 0; i < numLength; i++) {
                    finalOutput = finalOutput + word[i];
                }
                $('#BankDeposite_RupeesInWords').val(finalOutput + " Only");

            });
    </script>
}