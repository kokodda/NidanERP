@model Nidan.Models.ActivityTaskViewModel

@{
    ViewBag.Title = "Create Activity Task";
}

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Create Activity Task <small></small></h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        @if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
                        {
                            <div class="row">
                                <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                    @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                </div>
                            </div>
                        }
                        @Html.HiddenFor(model => Model.ActivityTask.Activity.Remark)
                        @Html.HiddenFor(model => Model.ActivityTask.Activity.ActivityId)
                        @Html.HiddenFor(model => Model.ActivityTask.Activity.StartTimeSpan)
                        @Html.HiddenFor(model => Model.ActivityTask.Activity.EndTimeSpan)
                        @Html.Partial("_ActivityTask", Model)
                        <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                            <div class="form-group">
                                <div class="pull-right">
                                    <button type="submit" class="btn btn-warning">Add Task</button>
                                    <a href="@Url.Action("Index")" class="btn btn-success" role="button">
                                        Finish
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    @Html.Partial("_ActivityTaskByActivityId", Model)
</div>
<div>
    <a href="@Url.Action("Index")" class="btn btn-primary" role="button">
        <span class="fa fa-chevron-left"></span>&nbsp;Back to list
    </a>
</div>
@section scripts {
    <script>
        $(document).ready(function() {
            $('#txtNumberOfDays').attr("disabled", true);
            $('#txtNumberOfHours').attr("disabled", true);
            var startTimeSpan = "@Model.Activity.StartTimeSpan" == "AM" ? "AM" : "PM";
            var endTimeSpan = "@Model.Activity.EndTimeSpan" == "AM" ? "AM" : "PM";
            $("#ActivityTask_StartHour").val("@Model.Activity.StartHour");
            $('#ActivityTask_StartMinute').val("@Model.Activity.StartMinute");
            startTimeSpan == "AM"
                ? $("#rbActivityStartTimeSpanAM").prop("checked", true)
                : $("#rbActivityStartTimeSpanPM").prop("checked", true);
            $('#ActivityTask_EndHour').val("@Model.Activity.EndHour");
            $('#ActivityTask_EndMinute').val("@Model.Activity.EndMinute");
            endTimeSpan == "AM"
                ? $("#rbActivityEndTimeSpanAM").prop("checked", true)
                : $("#rbActivityEndTimeSpanPM").prop("checked", true);
            $('#txtNumberOfDays').val(@Model.NumberOfDays);
            var numberOfDays = @Model.NumberOfDays;
            if (numberOfDays <= 0) {
                $('#numberOfHours').show();
                $('#txtNumberOfHours').val('@Model.NumberOfHours');
            } else {
                $('#numberOfHours').hide();
            }
        });
        $('#ActivityTask_CentreId').change(function() {
            var centreId = $('#ActivityTask_CentreId :selected').val();
            var activityAssigneeGroupId = @Model.Activity.ActivityAssigneeGroupId;
            $.ajax({
                url: '/ActivityTask/GetPersonnel',
                type: 'POST',
                data: JSON.stringify({ centreId: centreId, activityAssigneeGroupId: activityAssigneeGroupId }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function(xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function(result) {
                    $("#ActivityTask_AssignTo").empty();
                    $("#ActivityTask_AssignTo").append($("<option></option>").html("Select Assign To"));
                    $.each(result,
                        function(key, value) {
                            $("#ActivityTask_AssignTo").append($("<option></option>").val(value.Personnel.PersonnelId)
                                .html(value.Personnel.Fullname));

                        });
                },
                async: true,
                processData: false
            });
        });

        var daterangepickerOptionsStartDate = {
            autoApply: true,
            singleDatePicker: true,
            showDropdowns: true,
            showCustomRangeLabel: false,
            opens: 'left',
            //minDate: '@Model.Activity.StartDate.ToString("dd MMMM yyyy")',
            //maxDate: moment().add('2', 'days').format('DD MMMM YYYY'),
            locale: {
                "format": "DD MMMM YYYY"
            }
        };

        var daterangepickerOptionsEndDate = {
            autoApply: true,
            singleDatePicker: true,
            showDropdowns: true,
            showCustomRangeLabel: false,
            opens: 'left',
            //minDate: '@Model.Activity.EndDate.ToString("dd MMMM yyyy")',
            //maxDate: moment().add('2', 'days').format('DD MMMM YYYY'),
            locale: {
                "format": "DD MMMM YYYY"
            }
        };

        jQuery(function() {
            jQuery(".activityTaskStartDate").daterangepicker(daterangepickerOptionsStartDate);
            $('.activityTaskStartDate').val('@Model.Activity.StartDate.ToString("dd MMMM yyyy")');
            $(".activityTaskStartDate").on('apply.daterangepicker',
                function(ev, picker) {
                    $(this).val(picker.startDate.format('DD MMMM YYYY'));
                });

            jQuery(".activityTaskEndDate").daterangepicker(daterangepickerOptionsEndDate);
            $('.activityTaskEndDate').val('@Model.Activity.EndDate.ToString("dd MMMM yyyy")');
            $(".activityTaskEndDate").on('apply.daterangepicker',
                function(ev, picker) {
                    $(this).val(picker.startDate.format('DD MMMM YYYY'));
                });
        });

        $('#ActivityTask_StartDate').change(function() {
            dateDifference();
        });

        $('#ActivityTask_EndDate').change(function() {
            dateDifference();
        });

        $('#ActivityTask_StartHour').change(function() {
            timeSpanDifference();
        });

        $('#ActivityTask_StartMinute').change(function() {
            timeSpanDifference();
        });

        $('#ActivityTask_EndHour').change(function() {
            timeSpanDifference();
        });

        $('#ActivityTask_EndMinute').change(function() {
            timeSpanDifference();
        });

        $("input[name='ActivityTask.StartTimeSpan']").change(function() {
            timeSpanDifference();
        });

        $("input[name='ActivityTask.EndTimeSpan']").change(function() {
            timeSpanDifference();
        });

        function timeSpanDifference() {
            if (document.readyState === 'complete') {
                var startTimeSpan = $("input[name='ActivityTask.StartTimeSpan']:checked").val();
                var endTimeSpan = $("input[name='ActivityTask.EndTimeSpan']:checked").val();
                var startTime = $('#ActivityTask_StartHour').val() +":" +$('#ActivityTask_StartMinute').val() +" " +startTimeSpan;
                var endTime = $('#ActivityTask_EndHour').val() +":" +$('#ActivityTask_EndMinute').val() +" " +endTimeSpan;
                var sDate = "1970-1-1 "+startTime;
                var eDate = "1970-1-1 "+endTime;
                var difference = new Date(new Date(eDate) - new Date(sDate)).toUTCString().split(" ")[4];
                $('#txtNumberOfHours').val(difference);
            }
        }

        function dateDifference() {
            if (document.readyState === 'complete') {
                var sDate = $('#ActivityTask_StartDate').val();
                var eDate = $('#ActivityTask_EndDate').val();
                var startDate = moment(sDate);
                var endDate = moment(eDate);
                var diff = endDate.diff(startDate, 'days');
                $('#txtNumberOfDays').val(diff);
            }
        }
    </script>
}