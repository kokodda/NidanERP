@using Nidan.Extensions
@model Nidan.Models.AssesmentViewModel
@{
    ViewBag.Title = string.Format("Edit Assesment ({0})", Model.Assesment.Name);
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_content">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        @if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
                        {
                            <div class="row">
                                <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                    @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                </div>
                            </div>

                        }
                        @Html.HiddenFor(model => Model.Assesment.AssesmentId)
                        @Html.Partial("_Assesment", Model)
                        <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                            <div class="form-group">
                                <div class="pull-right">
                                    <button type="submit" class="btn btn-success">Submit</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@*//-------------------------------------------*@
<div ng-controller="AssesmentController as model" ng-init="model.retrieveCandidateAssesmentByBatchId(@Model.Assesment.BatchId)">
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>
                        Candidate List <small></small>
                    </h2>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <p class="text-muted font-13 m-b-30">
                    </p>
                    <div id="datatable_wrapper" class="dataTables_wrapper form-inline dt-bootstrap no-footer">
                        <div class="row">
                            <div class="col-xs-12">
                                @Html.Partial("Pagination/_pageSize")
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12">
                                <table wt-responsive-table class="table table-striped table-bordered jambo_table table-hover dataTable no-footer" role="grid" aria-describedby="datatable-fixed-header_info">
                                    <thead>
                                    <tr role="row">
                                        <th></th>
                                        <th ng-click="model.order('StudentCode')" ng-class="model.orderClass('StudentCode')">Student Code</th>
                                        <th ng-click="model.order('CandidateName')" ng-class="model.orderClass('CandidateName')">Candidate Name</th>
                                        <th ng-click="model.order('ExamSet')" ng-class="model.orderClass('ExamSet')">Exam Set</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    <tr ng-repeat="assesment in model.assesments" class="odd gradeX" ng-click="$event.originalEvent.ngClickHandled">
                                        <td><input type="checkbox" id="chk" ng-disabled="assesment.IsAssignExamSet=='Yes'" ng-model="assesment.Ischecked" ng-click="model.canWeAssign()" /></td>
                                        <td><span ng-bind="assesment.StudentCode"></span></td>
                                        <td><span ng-bind="assesment.CandidateName"></span></td>
                                        <td>
                                            <button type="button" ng-if="assesment.ExamSet!=null" class="btn-success btn-xs"><span ng-bind="assesment.ExamSet"></span></button>
                                            <button type="button" ng-if="assesment.ExamSet==null" class="btn-danger btn-xs">Not Yet Assign</button>
                                        </td>
                                    </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div>
        <button id="btnAssignExamSet" type="submit" class="btn btn-warning" ng-click="model.openModuleExamSetModalPopUp(model.assesments)" ng-disabled="model.isAssignButtonEnable" data-toggle="modal" data-target="#moduleExamSetModal">Assign Exam Set</button>
    </div>
    @Html.Partial("_AssignModuleExamSet")
</div>
    <div>
        <a href="@Url.Action("Index")" class="btn btn-primary" role="button">
            <span class="fa fa-chevron-left"></span>&nbsp;Back to list
        </a>
    </div>
    @section scripts {
        <script>
            var daterangepickerOptions = {
                autoApply: true,
                singleDatePicker: true,
                showDropdowns: true,
                showCustomRangeLabel: false,
                opens: 'left',
                //minDate: moment(),
                //maxDate: moment().add('2', 'days').format('DD MMMM YYYY'),
                onSelect: function () {
                    selectedDate = moment().format('DD MMMM YYYY');
                },
                locale: {
                    "format": "DD MMMM YYYY"
                }
            };

            jQuery(function () {
                jQuery(".date").daterangepicker(daterangepickerOptions);
                $('.date').val(moment().format('DD MMMM YYYY'));
                $(".date").on('apply.daterangepicker',
                    function (ev, picker) {
                        $(this).val(picker.startDate.format('DD MMMM YYYY'));
                    });
            });

            $('#Assesment_CentreId').change(function () {
                var centreId = $('#Assesment_CentreId :selected').val();
                $.ajax({
                    url: '/Assesment/GetCourses',
                    type: 'POST',
                    data: JSON.stringify({ centreId: centreId }),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    error: function (xhr) {
                        alert('Error: ' + xhr.statusText);
                    },
                    success: function (result) {
                        $("#Assesment_CourseId").empty();
                        $("#Assesment_CourseId").append($("<option></option>").html("Select Course"));
                        $.each(result, function (key, value) {
                            $("#Assesment_CourseId").append($("<option></option>").val(value.CourseId).html(value.Name));

                        });
                    },
                    async: true,
                    processData: false
                });
            });

            $('#Assesment_CourseId').change(function () {
                var centreId = $('#Assesment_CentreId :selected').val();
                var courseId = $('#Assesment_CourseId :selected').val();
                $.ajax({
                    url: '/Assesment/GetBatches',
                    type: 'POST',
                    data: JSON.stringify({ courseId: courseId, centreId: centreId }),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    error: function (xhr) {
                        alert('Error: ' + xhr.statusText);
                    },
                    success: function (result) {
                        $("#Assesment_BatchId").empty();
                        $("#Assesment_BatchId").append($("<option></option>").html("Select Batch"));
                        $.each(result, function (key, value) {
                            $("#Assesment_BatchId").append($("<option></option>").val(value.BatchId).html(value.Name));

                        });
                    },
                    async: true,
                    processData: false
                });
            });
        </script>
    }
