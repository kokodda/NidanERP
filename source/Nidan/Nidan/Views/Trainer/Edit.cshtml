@model Nidan.Models.TrainerViewModel

@{
    ViewBag.Title = string.Format("Edit Trainer ({0})", Model.Trainer.FirstName);
}

<div>
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>@Model.Trainer.FirstName<small>Edit trainer</small></h2>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-horizontal">
                            @if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
                            {
                                <div class="row">
                                    <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                        @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                    </div>
                                </div>

                            }
                            @Html.HiddenFor(model => Model.Trainer.TrainerId)
                            @Html.Partial("_Trainer", Model)

                            <div class="col-md-5 col-sm-12 col-xs-12 col-md-offset-3">
                                <div class="form-group">
                                    <div class="pull-right">
                                        <button type="submit" class="btn btn-success">Submit</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div ng-controller="TrainerDocumentController as model" ng-init="model.initialise(@Model.Trainer.TrainerId.ToString())">
            @Html.Partial("_TrainerDocument")
        </div>
    </div>
</div>
<div>
    <a href="@Url.Action("Index")" class="btn btn-primary" role="button">
        <span class="fa fa-chevron-left"></span>&nbsp;Back to list
    </a>
</div>
@section scripts {
    <script>
        //Submit Button Blur after Click
        $(document).on('submit', 'form', function () {
            var buttons = $(this).find('[type="submit"]');
            if ($(this).valid()) {
                buttons.each(function (btn) {
                    $(buttons[btn]).prop('disabled', true);
                });
            } else {
                buttons.each(function (btn) {
                    $(buttons[btn]).prop('disabled', false);
                });
            }
        });
        jQuery(function () {
            if (!$('#Trainer_Certified').is(':checked')) {
                $('.trainer-certification-textbox').hide();
            } else {
                $('.trainer-certification-textbox').show();
            }


            $('#yesRadioButton').click(function () {
                $('.trainer-certification-textbox').show();
            });

            $('#noRadioButton').click(function () {
                $('.trainer-certification-textbox').hide();
            });

        });

        $('#Trainer_SectorId').change(function () {
            var sectorId = $('#Trainer_SectorId :selected').val();
            $.ajax({
                url: '/Trainer/GetCourse',
                type: 'POST',
                data: JSON.stringify({ sectorId: sectorId }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function (result) {
                    $("#Trainer_CourseId").empty();
                    $.each(result, function (key, value) {
                        $("#Trainer_CourseId").append($("<option></option>").val(value.CourseId).html(value.Name));

                    });
                },
                async: true,
                processData: false
            });
        });

        $('#Trainer_StateId').change(function () {
            var stateId = $('#Trainer_StateId :selected').val();
            $.ajax({
                url: '/Trainer/GetDistrict',
                type: 'POST',
                data: JSON.stringify({ stateId: stateId }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function (result) {
                    $("#Trainer_DistrictId").empty();
                    $("#Trainer_DistrictId").append($("<option></option>").html("Select District"));
                    $.each(result, function (key, value) {
                        $("#Trainer_DistrictId").append($("<option></option>").val(value.DistrictId).html(value.Name));

                    });
                },
                async: true,
                processData: false
            });
        });

        $('#Trainer_DistrictId').change(function () {
            var districtId = $('#Trainer_DistrictId :selected').val();
            $.ajax({
                url: '/Trainer/GetTaluka',
                type: 'POST',
                data: JSON.stringify({ districtId: districtId }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function (result) {
                    $("#Trainer_TalukaId").empty();
                    $("#Trainer_TalukaId").append($("<option></option>").html("Select Taluka"));
                    $.each(result, function (key, value) {
                        $("#Trainer_TalukaId").append($("<option></option>").val(value.TalukaId).html(value.Name));

                    });
                },
                async: true,
                processData: false
            });
        });
    </script>
}
