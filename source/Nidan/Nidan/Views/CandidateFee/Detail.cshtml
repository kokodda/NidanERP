@using Nidan.Business.Enum
@model Nidan.Models.CandidateFeeViewModel

@{
    ViewBag.Title = "Detail";
}
@*@{
    int value = CandidateFee.FeeTypeId;
    FeeType feeType = (FeeType)value;
}*@

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div ng-controller="CandidateFeeController as model" ng-init="model.initialise(@Model.CandidateInstallmentId)">
            <div class="x_panel">
                <div class="x_title">
                    <h2><button type="button" class="btn btn-round btn-info btn-lg">@Model.CandidateName</button> Candidate Fees Details<small></small></h2>
                     <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <p class="text-muted font-13 m-b-30">
                    </p>
                    <div id = "datatable_wrapper" class="dataTables_wrapper form-inline dt-bootstrap no-footer">
                        <div class="row">
                            <div class="col-xs-12">
                                <table wt-responsive-table class="table table-striped table-bordered jambo_table table-hover dataTable no-footer" role="grid" aria-describedby="datatable-fixed-header_info">
                                    <thead>
                                    <tr role="row">
                                        <th>Fee Type</th>
                                        <th>ChequeDate</th>
                                        <th>Cheque Number</th>
                                        <th>Payment Mode</th>
                                        <th>Installment Date</th>
                                        <th>Payment Date</th>
                                        <th>Amount</th>
                                        <th>Payment Status</th>
                                        <th>Actions</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    <tr ng-repeat="candidateFee in model.candidateFees" class="odd gradeX">
                                        <td>
                                            <span ng-if="candidateFee.FeeTypeId==1">Registration</span>
                                            <span ng-if="candidateFee.FeeTypeId==2">Admission</span>
                                            <span ng-if="candidateFee.FeeTypeId==3">Installment -</span> <span ng-if="candidateFee.FeeTypeId==3" ng-bind="candidateFee.InstallmentNumber"></span>
                                        </td>
                                        <td>
                                            <span ng-if="candidateFee.PaymentMode.Name='Cheque'" ng-bind="candidateFee.ChequeDate|date : format : shortDate"></span></td>
                                        <td><span ng-bind="candidateFee.ChequeNumber"></span></td>
                                        <td>
                                            <span ng-if="candidateFee.PaymentModeId==1 && candidateFee.IsPaymentDone">Cash</span>
                                            <span ng-if="candidateFee.PaymentModeId==2 && candidateFee.IsPaymentDone">Cheque</span>
                                            <span ng-if="!candidateFee.IsPaymentDone" ng-bind=""></span>
                                        </td>
                                        <td><span ng-bind="candidateFee.InstallmentDate|date : format : shortDate"></span></td>
                                        <td><span ng-bind="candidateFee.PaymentDate|date : format : shortDate"></span></td>
                                        <td><span ng-if="candidateFee.IsPaymentDone" ng-bind="candidateFee.PaidAmount"></span> <span ng-if="!candidateFee.IsPaymentDone" ng-bind="candidateFee.InstallmentAmount"></span></td>
                                        <td class="col-lg-1">
                                            <button ng-if="!candidateFee.IsPaymentDone" type="button" class="btn btn-round btn-danger btn-xs">Pending</button>
                                            <button ng-if="candidateFee.IsPaymentDone" type="button" class="btn btn-round btn-warning btn-xs">Done</button>
                                        </td>
                                        <td>
                                            <button id="btnPayFee" ng-disabled="candidateFee.IsPaymentDone" type="button" class="btn btn-success" ng-click="model.openCandidateFeeModalPopUp(candidateFee.CandidateFeeId)" data-toggle="modal" data-target="#candidateFeeModal"><i class="fa fa-credit-card"></i> Pay</button>
                                            <button id="btn" class="btn btn-default" ng-disabled="!candidateFee.IsPaymentDone" ng-click="model.print(candidateFee.CandidateFeeId)"><i class="fa fa-print"></i> Print</button>
                                        </td>
                                    </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        @*     @Html.Partial("Pagination/_pagination")*@
                    </div>
                    <div class="row">
                        <div class="col-xs-12">
                            <label ng-bind="model.searchMessage"></label>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <a href="@Url.Action("Index")" class="btn btn-primary" role="button">
                    <span class="fa fa-chevron-left"></span>&nbsp;Back to list
                </a>
            </div>
            @Html.HiddenFor(model => model.CandidateInstallmentId)
            @Html.HiddenFor(model => model.CandidateFee.CandidateFeeId)
            @Html.AntiForgeryToken()
            @Html.Partial("_CandidateFee")
        </div>
    </div>
</div>
@section scripts
{
    <script>

        $("#labelChequeNumber").hide();
        $("#labelChequeDate").hide();
        $("#labelBankName").hide();
        $("#txtChequeNumber").hide();
        $("#txtChequeDate").hide();
        $("#txtBankName").hide();
        $("#txtChequeDate").val('');
        
        $("#dropDownPaymentMode").change(function () {
            if ($('#dropDownPaymentMode :selected').text() == "Cheque") {
                $("#txtChequeNumber").show();
                $("#txtChequeDate").show();
                $("#txtBankName").show();
                $("#labelChequeNumber").show();
                $("#labelChequeDate").show();
                $("#labelBankName").show();
            } else {
                $("#txtChequeDate").val('');
                $("#txtChequeNumber").hide();
                $("#txtChequeDate").hide();
                $("#txtBankName").hide();
                $("#labelChequeNumber").hide();
                $("#labelChequeDate").hide();
                $("#labelBankName").hide();
            }
        });

        $(function () {
            var daterangepickerOptions = {
                autoApply: true,
                singleDatePicker: true,
                showDropdowns: true,
                showCustomRangeLabel: false,
                opens: 'left',
                minDate: moment(),
                //maxDate: moment().add('2', 'days').format('DD MMMM YYYY'),
                onSelect: function () {
                    selectedDate = moment().format('DD MMMM YYYY');
                },
                locale: {
                    "format": "DD MMMM YYYY"
                }
            };

            jQuery(function () {
                jQuery(".date").daterangepicker(daterangepickerOptions);
                $('#GeneratedDate').val(moment().format('DD MMMM YYYY'));
                $(".generated .date").on('apply.daterangepicker', function (ev, picker) {
                    $(this).val(picker.startDate.format('DD MMMM YYYY'));
                });
            });
        });

        function onlyNumbers(evt) {
            var e = event || evt; // For trans-browser compatibility
            var charCode = e.which || e.keyCode;

            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;
            return true;
        }

        function NumToWord(inputNumber, outputControl) {
            var str = new String(inputNumber);
            var splt = str.split("");
            var rev = splt.reverse();
            var once = ['Zero', ' One', ' Two', ' Three', ' Four', ' Five', ' Six', ' Seven', ' Eight', ' Nine'];
            var twos = ['Ten', ' Eleven', ' Twelve', ' Thirteen', ' Fourteen', ' Fifteen', ' Sixteen', ' Seventeen', ' Eighteen', ' Nineteen'];
            var tens = ['', 'Ten', ' Twenty', ' Thirty', ' Forty', ' Fifty', ' Sixty', ' Seventy', ' Eighty', ' Ninety'];

            numLength = rev.length;
            var word = new Array();
            var j = 0;

            for (i = 0; i < numLength; i++) {
                switch (i) {

                    case 0:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = '' + once[rev[i]];
                        }
                        word[j] = word[j];
                        break;

                    case 1:
                        aboveTens();
                        break;

                    case 2:
                        if (rev[i] == 0) {
                            word[j] = '';
                        }
                        else if ((rev[i - 1] == 0) || (rev[i - 2] == 0)) {
                            word[j] = once[rev[i]] + " Hundred ";
                        }
                        else {
                            word[j] = once[rev[i]] + " Hundred and";
                        }
                        break;

                    case 3:
                        if (rev[i] == 0 || rev[i + 1] == 1) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if ((rev[i + 1] != 0) || (rev[i] > 0)) {
                            word[j] = word[j] + " Thousand";
                        }
                        break;


                    case 4:
                        aboveTens();
                        break;

                    case 5:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if (rev[i + 1] !== '0' || rev[i] > '0') {
                            word[j] = word[j] + " Lakh";
                        }

                        break;

                    case 6:
                        aboveTens();
                        break;

                    case 7:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if (rev[i + 1] !== '0' || rev[i] > '0') {
                            word[j] = word[j] + " Crore";
                        }
                        break;

                    case 8:
                        aboveTens();
                        break;

                        //            This is optional.

                        //            case 9:
                        //                if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                        //                    word[j] = '';
                        //                }
                        //                else {
                        //                    word[j] = once[rev[i]];
                        //                }
                        //                if (rev[i + 1] !== '0' || rev[i] > '0') {
                        //                    word[j] = word[j] + " Arab";
                        //                }
                        //                break;

                        //            case 10:
                        //                aboveTens();
                        //                break;

                    default: break;
                }
                j++;
            }

            function aboveTens() {
                if (rev[i] == 0) { word[j] = ''; }
                else if (rev[i] == 1) { word[j] = twos[rev[i - 1]]; }
                else { word[j] = tens[rev[i]]; }
            }

            word.reverse();
            var finalOutput = '';
            for (i = 0; i < numLength; i++) {
                finalOutput = finalOutput + word[i];
            }
            document.getElementById(outputControl).innerHTML = finalOutput + " Only";
        }

        //======================================================================on payment mode selection enable submit payment button
        var paymentmode = $('#dropDownPaymentMode').val();
        
        //
        $('#dropDownPaymentMode')
            .change(function() {
                if (paymentmode == "Select Payment Mode") {
                    $('#btnSaveCandidateFee').attr('disabled', false);
                }

            });

        //==============================================

        $('#btn').click(function () {
            var btn = $(this);
            $.post({ delay: 3 }).complete(function () {
                btn.prop('disabled', false);
            });
            btn.prop('disabled', true);

        });

    </script>
}
